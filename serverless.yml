service: serverless-api

plugins:
  - serverless-layers
  # - serverless-domain-manager

custom:
  # customDomain:
  #   domainName: serverless-api.takanashi.xyz
  #   basePath: ''
  #   stage: dev
  #   endpointType: 'regional'
  #   createRoute53Record: true
  #   securityPolicy: tls_1_2
  #   apiType: rest

  serverless-layers:
    dependenciesPath: ./package.json
    layersDeploymentBucket: serverless-lambda-layers-20200710



# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 256
  stage: dev
  region: ap-northeast-1
  endpointType: REGIONAL
  description: serverless-managed-gateway
  timeout: 30
  apiGateway:
    binaryMediaTypes:
      - 'image/*'

  package:
    include:
      - src/**
    exclude:
      - .vscode/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

functions:
  github_oauth2_entry:
    handler: src/handlers/github/oauth2/entry.handler
    events:
      - http:
          path: github
          method: get
    vpc: &vpc
      securityGroupIds:
        - sg-079b066a1153b7881
        - sg-d4d9f39d
      subnetIds:
        - subnet-0a7e7351
        - subnet-f1c714b9

  github_oauth2_callback:
    handler: src/handlers/github/oauth2/callback.handler
    vpc:
      <<: *vpc
    events:
      - http:
          path: github/callback
          method: get
          cors: &cors
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Api-Session-Id
            allowCredentials: false

  github_oauth2_check:
    handler: src/handlers/github/oauth2/check.handler
    vpc:
      <<: *vpc
    events:
      - http:
          path: github/check
          method: post
          cors:
            <<: *cors

  github_oauth2_login:
    handler: src/handlers/github/oauth2/login.handler
    vpc:
      <<: *vpc
    events:
      - http:
          path: github/login
          method: post
          cors:
            <<: *cors

  github_oauth2_revoke:
    handler: src/handlers/github/oauth2/revoke.handler
    vpc:
      <<: *vpc
    events:
      - http:
          path: github/revoke
          method: post
          cors:
            <<: *cors

  github_gists_list:
    handler: src/handlers/github/gists/list.handler
    vpc:
      <<: *vpc
    events:
      - http:
          path: documents
          method: get
          cors:
            <<: *cors
  
  github_gists_get:
    handler: src/handlers/github/gists/get.handler
    vpc:
      <<: *vpc
    events:
      - http:
          path: document/{id}
          method: get
          cors:
            <<: *cors

  github_gists_post:
    handler: src/handlers/github/gists/post.handler
    vpc:
      <<: *vpc
    events:
      - http:
          path: document
          method: post
          cors:
            <<: *cors

  github_gists_delete:
    handler: src/handlers/github/gists/delete.handler
    events:
      - http:
          path: document/{id}
          method: delete
          cors:
            <<: *cors

  github_gists_get_image:
    handler: src/handlers/github/gists/getImage.handler
    vpc:
      <<: *vpc
    events:
      - http:
          path: github/image/{id}
          method: get
          cors:
            <<: *cors


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
